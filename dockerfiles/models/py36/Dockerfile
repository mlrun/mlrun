FROM continuumio/anaconda3:2020.02

LABEL maintainer="yashab@iguazio.com"
LABEL org="iguazio.com"

ARG OMPI=4.0.3
ARG REPO=mlrun

ARG MLRUN_TAG=development
ENV MLRUN_TAG=$MLRUN_TAG

ARG TF_VER=2.1.0
ARG XGB_VER=1.0.2
ARG LGBM_VER=2.3.1

RUN apt update -qqq \
    && apt -y upgrade \
    && apt install -yq \
    build-essential \
    cmake \
    curl \
    graphviz \
    libboost-dev \
    libboost-filesystem-dev \
    libboost-system-dev \
    libreadline-dev \
    libreadline7 \
    openssh-client \
    openssh-server \
    subversion \
    && apt install -y ca-certificates \
    && update-ca-certificates --fresh \
    && apt clean \
    && apt autoremove \
    && rm -rf /var/lib/apt/lists/*

ENV SSL_CERT_DIR /etc/ssl/certs

RUN mkdir -p /var/run/sshd && \
    # Allow OpenSSH to talk to containers without asking for confirmation
    cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new && \
    echo "    StrictHostKeyChecking no" >> /etc/ssh/ssh_config.new && \
    mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config && \
    # install horovod examples
    svn checkout https://github.com/horovod/horovod/trunk/examples && \
    rm -rf /examples/.svn

# Install Open MPI
RUN mkdir /tmp/openmpi && \
    cd /tmp/openmpi && \
    curl -o openmpi-${OMPI}.tar.gz https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-${OMPI}.tar.gz && \
    tar zxf openmpi-${OMPI}.tar.gz && \
    cd openmpi-${OMPI} && \
    ./configure --enable-orterun-prefix-by-default && \
    make -j`nproc` all && \
    make install && \
    ldconfig && \
    rm -rf /tmp/openmpi

ENV OMPI_ALLOW_RUN_AS_ROOT=1
ENV OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1

RUN conda config --add channels bokeh && \
    conda config --add channels pytorch && \
    conda config --add channels conda-forge && \
    conda config --add channels anaconda && \
    conda install -y python=3.6 \
    bokeh \
    dask-kubernetes \
    dask-ml \
    dask-xgboost \
    dask[complete] \
    distributed \
    fsspec \
    pyarrow \
    pytest \
    scikit-optimize \
    wrapt

# pytorch caused cuda download, this guarantees cpu version:
RUN python -m pip install torch==1.4.0+cpu torchvision==0.5.0+cpu \
    -f https://download.pytorch.org/whl/torch_stable.html

# plain vanilla tensorflow isn't compiled optimaly for the architectures
# we are likely to encounter.  this should become an option:
#RUN python -m pip install -U intel-tensorflow==1.14 keras pillow requests

RUN conda install -n base -c anaconda tensorflow=1.14 keras

RUN HOROVOD_WITH_TENSORFLOW=1 HOROVOD_WITH_PYTORCH=1 \
    python -m pip install --no-cache-dir horovod

RUN python -m pip install -U --no-cache-dir \
    git+https://github.com/scikit-multiflow/scikit-multiflow.git \
    gnureadline \
    pyod

# xgboost
RUN mkdir /repos && \
    cd repos && \
    git clone --recursive https://github.com/dmlc/xgboost && \
    cd xgboost && \
    git fetch --all --tags --prune && \
    git checkout tags/v${XGB_VER} && \
    mkdir build && \
    cd build && \
    cmake .. && \
    make -j$(nproc) && \
    make install && \
    cd ../python-package && \
    python -m pip install --no-cache-dir -e .

RUN cd /repos && \
    git clone --recursive https://github.com/microsoft/LightGBM && \
    cd LightGBM && \
    git checkout v${LGBM_VER} && \
    mkdir build && cd build && \
    cmake -DUSE_MPI=1 .. && \
    make -j$(nproc) && \
    make install && \
    cd ../python-package && \
    python -m pip install --no-cache-dir -e .

RUN python -c "from matplotlib.font_manager import _rebuild; _rebuild();"

RUN python -m pip install git+https://github.com/${REPO}/mlrun.git@${MLRUN_TAG}

# remove dask verify version mismatch warnings
RUN python -m pip install --no-cache-dir \
    blosc==1.7.0 \
    cloudpickle==1.1.1 \
    dask==2.12.0 \
    distributed==2.14.0 \
    lz4==2.2.1 \
    msgpack==1.0.0 \
    tornado==6.0.4 \
    urllib3==1.25.8  \
    kubernetes==10.0.1 \
    scikit-plot

RUN conda install -c plotly plotly-orca plotly=4.7.0

RUN conda clean -ayq   

RUN python -m pip install lifelines scikit-plot
