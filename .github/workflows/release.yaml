# Copyright 2018 Iguazio
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'The version to release, without prefix v (e.g. 1.1.0-rc10)'
        required: true
      previous_version:
        description: 'The previous version, without prefix v (e.g. 1.1.0-rc9)'
        required: true
      pre_release:
        description: 'Whether to mark release as pre-release or not (default: false)'
        required: false
        default: 'true'
      generate_release_notes:
        description: 'Whether to generate release notes or not (default: true)'
        required: false
        default: 'true'
      skip_images:
        description: 'Comma separated list of images to skip building, example with all possible images: mlrun,ui,api,base,models,models-gpu,jupyter,test'
        required: false
        default: ''
      skip_publish_pypi:
        description: 'Whether to skip publishing the python package to Pypi, (true/false)'
        required: false
        default: 'false'
      skip_create_tag_release:
        description: 'Whether to skip creating tag & release in Github, (true/false)'
        required: false
        default: 'false'

jobs:
  trigger-and-wait-for-mlrun-image-building:
    name: Trigger build workflow in mlrun/mlrun and wait to finish
    runs-on: ubuntu-latest

    steps:
      - uses: convictional/trigger-workflow-and-wait@v1.6.5
        with:
          owner: mlrun
          repo: mlrun
          github_token: ${{ secrets.RELEASE_GITHUB_ACCESS_TOKEN }}
          workflow_file_name: build.yaml
          ref: ${{ github.ref_name }}
          wait_interval: 60
          client_payload: '{"docker_registries": "ghcr.io/,quay.io/,registry.hub.docker.com/", "version": "${{ github.event.inputs.version }}", "skip_images": "${{ github.event.inputs.skip_images }}"}'

  trigger-and-wait-for-ui-image-building:
    name: Trigger build workflow in mlrun/ui and wait to finish
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.inputs.skip_images, 'ui') }}

    steps:
      - uses: convictional/trigger-workflow-and-wait@v1.6.5
        with:
          owner: mlrun
          repo: ui
          github_token: ${{ secrets.RELEASE_GITHUB_ACCESS_TOKEN }}
          workflow_file_name: build.yaml
          ref: ${{ github.ref_name }}
          wait_interval: 60
          client_payload: '{"docker_registries": "ghcr.io/,quay.io/,registry.hub.docker.com/", "version": "${{ github.event.inputs.version }}"}'

  publish-to-pypi:
    name: Publish package to pypi
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_publish_pypi != 'true'
    # publishing to pypi is (kind of) irreversible, therefore do it only if both previous steps finished successfully
    needs: [trigger-and-wait-for-ui-image-building, trigger-and-wait-for-mlrun-image-building]
    steps:
      - uses: actions/checkout@v3
      - name: Set up python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
          cache: pip
      - name: Build & push to pypi
        run: |
          pip install twine wheel
          export TWINE_USERNAME=${{ secrets.PYPI_USERNAME }}
          export TWINE_PASSWORD=${{ secrets.PYPI_PASSWORD }}
          MLRUN_VERSION="$INPUT_VERSION" make publish-package
        env:
          INPUT_VERSION: ${{ github.event.inputs.version }}

  create-releases:
    name: Create release & tag v${{ github.event.inputs.version }}
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_create_tag_release != 'true'
    needs: publish-to-pypi
    steps:
      - uses: ncipollo/release-action@v1
        with:
          tag: v${{ github.event.inputs.version }}
          commit: ${{ github.ref_name }}
          token: ${{ secrets.RELEASE_GITHUB_ACCESS_TOKEN }}
          prerelease: ${{ github.event.inputs.pre_release }}
      - uses: ncipollo/release-action@v1
        with:
          repo: ui
          tag: v${{ github.event.inputs.version }}
          commit: ${{ github.ref_name }}
          token: ${{ secrets.RELEASE_GITHUB_ACCESS_TOKEN }}
          # experienced 500 errors when trying to create release notes for ui repo with `prerelease flag`
          # prerelease: ${{ github.event.inputs.pre_release }}

  update-release-notes:
    name: Update release notes
    runs-on: ubuntu-latest
    if: github.event.inputs.generate_release_notes == 'true'
    needs: create-releases
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v4
        with:
          python-version: 3.9
          cache: pip
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r automation/requirements.txt -r dev-requirements.txt && pip install -e .
      - name: Generate release notes
        id: release-notes
        run: |
          make release-notes MLRUN_OLD_VERSION="v$INPUT_PREVIOUS_VERSION" MLRUN_VERSION="v$INPUT_VERSION" MLRUN_RELEASE_BRANCH=${{ github.ref_name }} MLRUN_RAISE_ON_ERROR=false MLRUN_RELEASE_NOTES_OUTPUT_FILE=release_notes.md MLRUN_SKIP_CLONE=true
        env:
          INPUT_PREVIOUS_VERSION: ${{ github.event.inputs.previous_version }}
          INPUT_VERSION: ${{ github.event.inputs.version }}
      - name: resolve release notes
        id: resolve-release-notes
        run: |
          echo "body<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - uses: ncipollo/release-action@v1
        with:
          tag: v${{ github.event.inputs.version }}
          commit: ${{ github.ref_name }}
          token: ${{ secrets.RELEASE_GITHUB_ACCESS_TOKEN }}
          allowUpdates: true
          prerelease: ${{ github.event.inputs.pre_release }}
          body: ${{ steps.resolve-release-notes.outputs.body }}
  
  
  update-tutorials:
    name: Bundle tutorials
    needs: create-releases
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Create tutorials tar
        run: |
          tar -cvf mlrun-tutorials.tar docs/tutorial
      - name: Add tutorials tar to release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          tag: v${{ github.event.inputs.version }}
          token: ${{ secrets.RELEASE_GITHUB_ACCESS_TOKEN }}
          artifacts: mlrun-tutorials.tar
