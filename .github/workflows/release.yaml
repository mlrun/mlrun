name: Release

on:
  push:
    tags:
      # we don't want to be triggered for RC releases (e.g. v0.6.0-rc9)
      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  push-to-release-branch:
    name: Push source to release branch
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        # we can't use the default token coming with the action cause GH prevents from create or updating workflows
        # which might be part of the release contents
        token: ${{ secrets.RELEASE_GITHUB_ACCESS_TOKEN }}
    - name: Push to release branch
      run: |
        export tag=$(echo ${GITHUB_REF#refs/tags/})
        git config user.name "mlrun-iguazio"
        git config user.email "mlrun.iguazio@gmail.com"
        MLRUN_GIT_ORG=${{ github.repository_owner }} MLRUN_VERSION=$tag make release


  trigger-build-workflow:
    # When the build workflow is triggered for a commit to development it builds the images and (docker) tag them with
    # <latest-released-version>-<commit-hash>.
    # When the periodic system tests workflow runs, it gets the latest commit from development, and searches for the
    # relevant tag.
    # Therefore, when a new version is released, any system test that will run after it, and before a new commit to
    # development was done, will search for a docker tag that doesn't exist.
    # In order to solve that we trigger the build workflow on the development branch when we release a new version
    name: Trigger build workflow on development branch
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Install curl and jq
        run: sudo apt-get install curl jq
      - name: Run script file
        timeout-minutes: 240
        # sleep 60 at the end to give pypi cache chance to refresh
        run: |
          export tag=$(echo ${GITHUB_REF#refs/tags/})
          chmod +x ./automation/scripts/pypi_release_waiter.sh
          ./automation/scripts/pypi_release_waiter.sh $tag
          sleep 60
        shell: bash
      - uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Build
          # we can't use the default token coming with the action cause GH prevents it from triggering workflows
          token: ${{ secrets.RELEASE_GITHUB_ACCESS_TOKEN }}
          ref: development
      - uses: benc-uk/workflow-dispatch@v1
        with:
          # Trigger in mlrun/ui as well
          repo: ${{ github.repository_owner }}/ui
          workflow: Build
          # we can't use the default token coming with the action cause GH prevents it from triggering workflows
          token: ${{ secrets.RELEASE_GITHUB_ACCESS_TOKEN }}
          ref: development
