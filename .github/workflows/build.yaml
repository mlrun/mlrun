# This name is referenced in the release.yaml workflow, if you're changing here - change there
name: Build

on:
  push:
    branches:
    - development
    - '[0-9]+.[0-9]+.x'

  workflow_dispatch:
    inputs:
      docker_registries:
        description: 'Comma separated list of docker registries to push images to (default: ghcr.io/, use registry.hub.docker.com/ for docker hub)'
        required: true
        default: 'ghcr.io/'
      docker_repo:
        description: 'Docker repo to push images to (default: lowercase github repository owner name)'
        required: false
        default: ''
jobs:
  build-images:
    name: Build and push image - ${{ matrix.image-name }}
    runs-on: ubuntu-latest

    # let's not run this on every fork, change to your fork when developing
    if: github.repository == 'mlrun/mlrun' || github.event_name == 'workflow_dispatch'

    strategy:
      matrix:
        image-name:
        - mlrun
        - api
        - base
        - models
        - models-gpu
        - jupyter
        - test
    steps:
    - uses: actions/checkout@v2
    - name: Install curl and jq
      run: sudo apt-get install curl jq
    - name: Extract git hash, ref and latest version
      id: git_info
      run: |
        echo "::set-output name=mlrun_commit_hash::$(git rev-parse --short=8 $GITHUB_SHA)"
        echo "::set-output name=latest_version::$(curl -sf https://pypi.org/pypi/mlrun/json | jq -r '.info.version')"
    - name: Resolve docker cache tag for branch ref
      id: docker_cache
      run: |
        if [ "${{ github.ref_type }}" = "branch" ]; then
          export version_suffix=$(echo "$GITHUB_REF_NAME" | grep -E "^[0-9]+\.[0-9]+\.x$" | tr -d '.');
          export unstable_tag=$(if [ -z "$version_suffix" ]; then echo "unstable-cache"; else echo "unstable-cache-$version_suffix";fi);
        else
          export tag=$(echo "$GITHUB_REF_NAME" | grep --color=never -E "^v[0-9]+\.[0-9]+\.[0-9]+(-rc[0-9]+)?$");
          export version_suffix=$(echo ${tag#v} | cut -f1,2 -d'.' | tr -d '.');
          export unstable_tag=$(if [ -z "$version_suffix" ]; then echo "unstable-cache"; else echo "unstable-cache-${version_suffix}x";fi);
        fi
        echo "::set-output name=tag::$(echo $unstable_tag)"
    - name: Set computed versions params
      id: computed_params
      run: |
        if [ "${{ github.ref_type }}" = "branch" ]; then
          echo "::set-output name=mlrun_version::${{ steps.git_info.outputs.latest_version }}+${{ steps.git_info.outputs.mlrun_commit_hash }}";
        else
          echo "::set-output name=mlrun_version::$(echo $GITHUB_REF_NAME#v)";
        fi
        echo "::set-output name=mlrun_docker_repo::$( \
          input_docker_repo=${{ github.event.inputs.docker_repo }} && \
          default_docker_repo=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]') && \
          echo ${input_docker_repo:-`echo $default_docker_repo`})"
        echo "::set-output name=mlrun_docker_registries::$( \
          input_docker_registries=${{ github.event.inputs.docker_registries }} && \
          echo ${input_docker_registries:-ghcr.io/})"
    - name: Docker login
      # all suffixed with "| true" to allow failures if secrets are not defined (fork)
      run: |
        echo ${{ secrets.GHCR_DOCKER_REGISTRY_PASSWORD }} | \
          docker login ghcr.io -u ${{ secrets.GHCR_DOCKER_REGISTRY_USERNAME }} --password-stdin | true
        echo ${{ secrets.DOCKER_HUB_DOCKER_REGISTRY_PASSWORD }} | \
          docker login registry.hub.docker.com -u ${{ secrets.DOCKER_HUB_DOCKER_REGISTRY_USERNAME }} \
          --password-stdin | true
        echo ${{ secrets.QUAY_IO_DOCKER_REGISTRY_PASSWORD }} | \
          docker login quay.io -u ${{ secrets.QUAY_IO_DOCKER_REGISTRY_USERNAME }} \
          --password-stdin | true

    - name: Pull cache, build and push image

      # we don't really want per-commit test image we just want to build and push the cache image so CI will be able
      # to use it and run much faster
      if: ${{ matrix.image-name != 'test' }}
      run: |
        for registry in $(echo ${{ steps.computed_params.outputs.mlrun_docker_registries }} | sed "s/,/ /g"); \
          do \
            MLRUN_DOCKER_REGISTRY=$registry \
            MLRUN_DOCKER_CACHE_FROM_REGISTRY=ghcr.io/ \
            MLRUN_DOCKER_REPO=${{ steps.computed_params.outputs.mlrun_docker_repo }} \
            MLRUN_VERSION=${{ steps.computed_params.outputs.mlrun_version }} \
            MLRUN_DOCKER_CACHE_FROM_TAG=${{ steps.docker_cache.outputs.tag }} \
            MLRUN_PUSH_DOCKER_CACHE_IMAGE=true \
            make push-${{ matrix.image-name }}; \
          done;

    - name: Build and push unstable tag

      # we don't need to have unstable tag for the test image
      # And we don't need to run this when triggered manually (workflow dispatch)
      if: matrix.image-name != 'test' && github.event_name != 'workflow_dispatch' && steps.git_info.outputs.branch == 'development'
      run: |
        for registry in "ghcr.io/" "quay.io/" "registry.hub.docker.com/"; \
          do \
            MLRUN_DOCKER_REGISTRY=$registry \
            MLRUN_DOCKER_CACHE_FROM_REGISTRY=ghcr.io/ \
            MLRUN_DOCKER_REPO=${{ steps.computed_params.outputs.mlrun_docker_repo }} \
            MLRUN_VERSION=unstable \
            MLRUN_DOCKER_CACHE_FROM_TAG=${{ steps.docker_cache.outputs.tag }} \
            make push-${{ matrix.image-name }}; \
          done;
    - name: Pull cache, build and push test image
      if: ${{ matrix.image-name == 'test' }}
      run: |
        for registry in $(echo ${{ steps.computed_params.outputs.mlrun_docker_registries }} | sed "s/,/ /g"); \
          do \
            MLRUN_DOCKER_REGISTRY=$registry \
            MLRUN_DOCKER_CACHE_FROM_REGISTRY=ghcr.io/ \
            MLRUN_DOCKER_REPO=${{ steps.computed_params.outputs.mlrun_docker_repo }} \
            MLRUN_VERSION=${{ steps.docker_cache.outputs.tag }} \
            MLRUN_DOCKER_CACHE_FROM_TAG=${{ steps.docker_cache.outputs.tag }} \
            MLRUN_PUSH_DOCKER_CACHE_IMAGE=true \
            make push-${{ matrix.image-name }}; \
          done;
